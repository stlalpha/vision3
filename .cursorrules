Golang Development Rules & AI Collaboration Guide
üìú Core Philosophy
Simplicity: Prioritize simple, clear, and maintainable solutions. Avoid unnecessary complexity or over-engineering.
Iterate: Prefer iterating on existing, working code rather than building entirely new solutions from scratch, unless fundamentally necessary or explicitly requested.
Focus: Concentrate efforts on the specific task assigned. Avoid unrelated changes or scope creep.
Quality: Strive for a clean, organized, well-tested, and secure codebase.
Collaboration: This document guides both human developers and the AI assistant for effective teamwork.
üìö Project Context & Understanding
Documentation First:
Always check for and thoroughly review relevant project documentation before starting any task. This includes:
Product Requirements Documents (PRDs)
README.md (Project overview, setup, patterns, technology stack)
docs/architecture.md (System architecture, component relationships)
docs/technical.md (Technical specifications, established patterns)
tasks/tasks.md (Current development tasks, requirements)
If documentation is missing, unclear, or conflicts with the request, ask for clarification.
Architecture Adherence:
Understand and respect module boundaries, data flow, system interfaces, and component dependencies outlined in docs/architecture.md.
Validate that changes comply with the established architecture. Warn and propose compliant solutions if a violation is detected.
Pattern & Tech Stack Awareness:
Reference README.md and docs/technical.md to understand and utilize existing patterns and technologies.
Exhaust options using existing implementations before proposing new patterns or libraries.
‚öôÔ∏è Task Execution & Workflow
Task Definition:
Clearly understand the task requirements, acceptance criteria, and any dependencies from tasks/tasks.md and the PRD.
Systematic Change Protocol: Before making significant changes:
Identify Impact: Determine affected components, dependencies, and potential side effects.
Plan: Outline the steps. Tackle one logical change or file at a time.
Verify Testing: Confirm how the change will be tested. Add tests if necessary before implementing (see TDD).
Progress Tracking:
Keep docs/status.md updated with task progress (in-progress, completed, blocked), issues encountered, and completed items.
Update tasks/tasks.md upon task completion or if requirements change during implementation.
ü§ñ AI Collaboration & Prompting
Clarity is Key: Provide clear, specific, and unambiguous instructions to the AI. Define the desired outcome, constraints, and context.
Context Referencing: If a task spans multiple interactions, explicitly remind the AI of relevant previous context, decisions, or code snippets.
Suggest vs. Apply: Clearly state whether the AI should suggest a change for human review or apply a change directly (use only when high confidence and task is well-defined). Use prefixes like "Suggestion:" or "Applying fix:".
Question AI Output: Human developers should critically review AI-generated code. Question assumptions, verify logic, and don't blindly trust confident-sounding but potentially incorrect suggestions (hallucinations).
Focus the AI: Guide the AI to work on specific, focused parts of the task. Avoid overly broad requests that might lead to architectural or logical errors.
Leverage Strengths: Use the AI for tasks it excels at (boilerplate generation, refactoring specific patterns, finding syntax errors, generating test cases) but maintain human oversight for complex logic, architecture, and security.
Incremental Interaction: Break down complex tasks into smaller steps for the AI. Review and confirm each step before proceeding.
Standard Check-in (for AI on large tasks): Before providing significant code suggestions:
"Confirming understanding: I've reviewed [specific document/previous context]. The goal is [task goal], adhering to [key pattern/constraint]. Proceeding with [planned step]." (This replaces the more robotic "STOP AND VERIFY").
‚ú® Code Quality & Style
Language Guidelines:
Golang: Follow the official Go style guide. Use gofmt for formatting. Document code with proper Go comments.
API/Backend: Follow RESTful or gRPC design principles as per project standards. Maintain consistent API structure.
Readability & Maintainability: Write clean, well-organized code with meaningful variable and function names.
Small Files & Components:
Keep files under 300 lines. Refactor proactively.
Break down large packages into smaller, single-responsibility modules.
Follow Go's package organization principles.
Avoid Duplication (DRY): Actively look for and reuse existing functionality. Refactor to eliminate duplication.
No Custom Build Systems: Use Go's built-in tools and established project tooling. Avoid custom build systems.
Linting/Formatting:
Use gofmt, golint, and go vet for consistent code quality.
Configure and follow golangci-lint rules established in the project.
Pattern Consistency: Adhere to established project patterns. Don't introduce new ones without discussion/explicit instruction. If replacing an old pattern, ensure the old implementation is fully removed.
File Naming: Use clear, descriptive names. Avoid "temp", "refactored", "improved", etc., in permanent file names.
Go files: Use snake_case for file names (e.g., user_profile.go).
Follow Go conventions for package names (lower case, short, concise).
No One-Time Scripts: Do not commit one-time utility scripts into the main codebase.
‚ôªÔ∏è Refactoring
Purposeful Refactoring: Refactor to improve clarity, reduce duplication, simplify complexity, or adhere to architectural goals.
Holistic Check: When refactoring, look for duplicate code, similar components/files, and opportunities for consolidation across the affected area.
Edit, Don't Copy: Modify existing files directly. Do not duplicate files and rename them (e.g., profile_service_v2.go).
Verify Integrations: After refactoring, ensure all callers, dependencies, and integration points function correctly. Run relevant tests.
‚úÖ Testing & Validation
Test-Driven Development (TDD):
New Features: Outline tests, write failing tests, implement code, refactor.
Bug Fixes: Write a test reproducing the bug before fixing it.
Comprehensive Tests:
Use Go's standard testing package for unit tests and benchmarks.
Use testify or other approved testing libraries if established in the project.
Implement integration tests for API endpoints and service layers.
Tests Must Pass: All tests must pass before committing or considering a task complete. Notify the human developer immediately if tests fail and cannot be easily fixed.
No Mock Data (Except Tests): Use mock data only within test environments. Development and production should use real or realistic data sources.
Manual Verification: Supplement automated tests with manual checks where appropriate, especially for API changes.
üêõ Debugging & Troubleshooting
Fix the Root Cause: Prioritize fixing the underlying issue causing an error, rather than just masking or handling it, unless a temporary workaround is explicitly agreed upon.
Log Analysis:
Check application logs for errors, warnings, or relevant information.
Use structured logging for consistent log format and easier parsing.
Targeted Logging:
Use the project's established logging framework (e.g., logrus, zap).
Log appropriate context to aid debugging without excessive verbosity.
Check the fixes/ Directory: Before deep-diving into a complex or recurring bug, check fixes/ for documented solutions to similar past issues.
Document Complex Fixes: If a bug requires significant effort (multiple iterations, complex logic) to fix, create a concise .md file in the fixes/ directory detailing the problem, investigation steps, and the solution. Name it descriptively (e.g., fixes/resolve-race-condition-in-user-update.md).
Research: Use available tools (Go documentation, pkg.go.dev, project wiki, etc.) to research solutions or best practices when stuck or unsure.
üîí Security
Server-Side Authority: Keep sensitive logic, validation, and data manipulation strictly on the backend. Use secure API endpoints with proper authentication and authorization.
Input Sanitization/Validation:
Always validate and sanitize incoming data, using struct tags or explicit validation.
Implement proper error handling to prevent information leakage.
Dependency Awareness: Be mindful of the security implications of adding or updating dependencies (via go.mod or go.sum).
Credentials: Never hardcode secrets or credentials in the codebase. Use environment variables or a secure secrets management solution.
üå≥ Version Control & Environment
Git Hygiene:
Commit frequently with clear, atomic messages.
Keep the working directory clean; ensure no unrelated or temporary files are staged or committed.
Use .gitignore effectively.
Branching Strategy: Follow the project's established branching strategy. Do not create new branches unless requested or necessary for the workflow (e.g., feature branches).
.env Files: Never commit .env files. Use .env.example for templates. Do not overwrite local .env files without confirmation.
Environment Awareness: Code should function correctly across different environments (dev, test, prod). Use environment variables for configuration.
Server Management: Kill related running servers before starting new ones. Restart servers after relevant configuration or backend changes.
üìÑ Documentation Maintenance
Update Docs: If code changes impact architecture, technical decisions, established patterns, or task status, update the relevant documentation (README.md, docs/architecture.md, docs/technical.md, tasks/tasks.md, docs/status.md).
Keep Rules Updated: This .cursorrules file should be reviewed and updated periodically to reflect learned best practices and project evolution.
üöÄ Go-Specific Best Practices
Error Handling:
Always check error returns and handle them appropriately.
Use meaningful error messages and consider custom error types for complex scenarios.
Follow project conventions for error wrapping (fmt.Errorf, errors.Wrap, etc.).
Concurrency:
Use goroutines and channels with caution and care.
Implement proper synchronization mechanisms (mutex, waitgroup, etc.) when using concurrent patterns.
Be aware of race conditions and deadlocks.
Resource Management:
Always close resources (files, connections, etc.) using defer when appropriate.
Implement proper context handling for cancelation and timeouts.
Interface Design:
Keep interfaces small and focused.
Use explicit interface definition at the consuming package, not the implementing package (except for well-established patterns).
Project Structure:
Follow the project's established structure for new packages and components.
Use Go modules for dependency management.
Organize code by functionality rather than type (avoid "models", "controllers" directories).
